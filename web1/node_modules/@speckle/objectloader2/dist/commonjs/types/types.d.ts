export type CustomLogger = (message?: string, ...optionalParams: unknown[]) => void;
export type Fetcher = (input: string | URL | Request, init?: RequestInit) => Promise<Response>;
export interface Item {
    baseId: string;
    base: Base;
    size?: number;
}
export interface Base {
    id: string;
    speckle_type: string;
    __closure?: Record<string, number>;
}
export interface Reference {
    speckle_type: string;
    referencedId: string;
    __closure?: Record<string, number>;
}
export interface DataChunk extends Base {
    data?: Base[];
}
export declare function isBase(maybeBase?: unknown): maybeBase is Base;
export declare function isReference(maybeRef?: unknown): maybeRef is Reference;
export declare function isScalar(value: unknown): value is string | number | boolean | bigint | symbol | undefined;
export declare function take<T>(it: Iterator<T>, count: number): T[];
//# sourceMappingURL=types.d.ts.map